name: Shopify Product Checks (every 5m + IST window)

on:
  schedule:
    - cron: "*/5 * * * *"     # every 5 minutes (UTC)
  workflow_dispatch:          # allow manual runs

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Show trigger info & time
        shell: bash
        run: |
          echo "event_name=${GITHUB_EVENT_NAME}"
          echo "ref=${GITHUB_REF}"
          echo "sha=${GITHUB_SHA}"
          date -u +"UTC time now: %Y-%m-%d %H:%M:%S"
          TZ=Asia/Kolkata date +"IST time now: %Y-%m-%d %H:%M:%S"

      # ---- REQUIRED inputs (no defaults). Fail immediately if any are missing.
      - name: Validate required Secrets/Variables
        shell: bash
        env:
          SHOPIFY_STORE_DOMAIN:       ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_ADMIN_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ADMIN_ACCESS_TOKEN }}
          SLACK_BOT_TOKEN:            ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID:           ${{ secrets.SLACK_CHANNEL_ID }}
          RUN_START_IST:              ${{ vars.RUN_START_IST }}        # e.g. 8  (08:00 IST)
          RUN_END_IST:                ${{ vars.RUN_END_IST }}          # e.g. 23 (23:00 IST)
          SHOPIFY_API_VERSION:        ${{ vars.SHOPIFY_API_VERSION }}  # e.g. 2025-07
          DRY_RUN:                    ${{ vars.DRY_RUN }}              # "true" or "false"
        run: |
          set -euo pipefail
          missing=()
          test -n "${SHOPIFY_STORE_DOMAIN:-}"        || missing+=("secrets.SHOPIFY_STORE_DOMAIN")
          test -n "${SHOPIFY_ADMIN_ACCESS_TOKEN:-}"  || missing+=("secrets.SHOPIFY_ADMIN_ACCESS_TOKEN")
          test -n "${SLACK_BOT_TOKEN:-}"             || missing+=("secrets.SLACK_BOT_TOKEN")
          test -n "${SLACK_CHANNEL_ID:-}"            || missing+=("secrets.SLACK_CHANNEL_ID")
          test -n "${RUN_START_IST:-}"               || missing+=("vars.RUN_START_IST")
          test -n "${RUN_END_IST:-}"                 || missing+=("vars.RUN_END_IST")
          test -n "${SHOPIFY_API_VERSION:-}"         || missing+=("vars.SHOPIFY_API_VERSION")
          test -n "${DRY_RUN:-}"                     || missing+=("vars.DRY_RUN")
          if [ "${#missing[@]}" -gt 0 ]; then
            echo "::error::Missing required Secrets/Variables: ${missing[*]}"
            exit 1
          fi

      # ---- IST run window gate (manual runs still proceed).
      - name: Enforce IST run window
        id: ist_gate
        shell: bash
        env:
          RUN_START_IST: ${{ vars.RUN_START_IST }}
          RUN_END_IST:   ${{ vars.RUN_END_IST }}
        run: |
          set -e
          NOW_HOUR=$(TZ=Asia/Kolkata date +%H)
          SHOULD=0
          if [ "$RUN_START_IST" -le "$RUN_END_IST" ]; then
            if [ "$NOW_HOUR" -ge "$RUN_START_IST" ] && [ "$NOW_HOUR" -lt "$RUN_END_IST" ]; then SHOULD=1; fi
          else
            if [ "$NOW_HOUR" -ge "$RUN_START_IST" ] || [ "$NOW_HOUR" -lt "$RUN_END_IST" ]; then SHOULD=1; fi
          fi
          echo "Current IST hour=${NOW_HOUR}; should_run=${SHOULD}"
          echo "should_run=$([ "$SHOULD" -eq 1 ] && echo true || echo false)" >> "$GITHUB_OUTPUT"

      - name: Check out repo
        if: steps.ist_gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v4

      - name: Use Node.js 22
        if: steps.ist_gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      # ---- Write runtime .env from Secrets/Variables (no defaults)
      - name: Create runtime .env
        if: steps.ist_gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
        shell: bash
        env:
          SHOPIFY_STORE_DOMAIN:        ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_ADMIN_ACCESS_TOKEN:  ${{ secrets.SHOPIFY_ADMIN_ACCESS_TOKEN }}
          SLACK_BOT_TOKEN:             ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID:            ${{ secrets.SLACK_CHANNEL_ID }}
          SHOPIFY_API_VERSION:         ${{ vars.SHOPIFY_API_VERSION }}
          DRY_RUN:                     ${{ vars.DRY_RUN }}
          # Optional (set as a Repository Variable to see per-call GQL cost logs from index.js)
          SHOPIFY_LOG_GRAPHQL_COSTS:   ${{ vars.SHOPIFY_LOG_GRAPHQL_COSTS }}
        run: |
          set -euo pipefail
          cat > .env <<EOF
          SHOPIFY_STORE_DOMAIN=${SHOPIFY_STORE_DOMAIN}
          SHOPIFY_ADMIN_ACCESS_TOKEN=${SHOPIFY_ADMIN_ACCESS_TOKEN}
          SHOPIFY_API_VERSION=${SHOPIFY_API_VERSION}
          SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
          SLACK_CHANNEL_ID=${SLACK_CHANNEL_ID}
          DRY_RUN=${DRY_RUN}
          SHOPIFY_LOG_GRAPHQL_COSTS=${SHOPIFY_LOG_GRAPHQL_COSTS}
          EOF
          echo "Wrote .env (values redacted)."

      - name: Install dependencies
        if: steps.ist_gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
        run: npm ci

      # ---- Visible per-run log: ping Shopify before running your script
      - name: Sanity ping Shopify (shop.name)
        if: steps.ist_gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
        shell: bash
        env:
          SHOPIFY_STORE_DOMAIN:       ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_ADMIN_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ADMIN_ACCESS_TOKEN }}
          SHOPIFY_API_VERSION:        ${{ vars.SHOPIFY_API_VERSION }}
        run: |
          set -euo pipefail
          URL="https://${SHOPIFY_STORE_DOMAIN}/admin/api/${SHOPIFY_API_VERSION}/graphql.json"
          echo "Pinging ${URL/\/graphql.json/} ..."
          curl -sS -X POST "$URL" \
            -H "Content-Type: application/json" \
            -H "X-Shopify-Access-Token: ${SHOPIFY_ADMIN_ACCESS_TOKEN}" \
            --data '{"query":"{ shop { name } }"}' | tee /tmp/ping.json
          jq -e '.data.shop.name' /tmp/ping.json >/dev/null || { echo "::error::Shopify ping failed"; cat /tmp/ping.json; exit 1; }

      # ---- Run your script and always capture a run.log artifact
      - name: Run index.js (capture logs)
        if: steps.ist_gate.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          set -euo pipefail
          node -v && npm -v
          # stdbuf makes Node flush line-by-line so you see output live in Actions.
          stdbuf -oL -eL node index.js | tee run.log

      - name: Upload run.log artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: run-log-${{ github.run_number }}
          path: run.log
          if-no-files-found: ignore
          retention-days: 7
